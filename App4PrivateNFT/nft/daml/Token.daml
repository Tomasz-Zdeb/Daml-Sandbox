module Token where

import Payment
-- content creators can mint NFTs
-- owners can sell their NFTs
-- while selling they have to pay royalties
-- participants must be explicitly permitted

-- behaviour
-- datamodel
-- rights/obligations
template Token
  with
    issuer: Party
    owner: Party
    description:  Text
    userAdmin: Party -- Party that makes sure that issuer and owner are verified and legitimate
    issued: Time
    lastPrice: Decimal
    currency: Text
    royaltyRate: Decimal
  where
    signatory issuer, userAdmin
    
    choice Offer: ContractId TokenOffer
      with
        newOwner: Party
        price: Decimal
      observer owner
      controller owner
      do 
        create TokenOffer with ..

-- express the idea of giving the ownership of a token to a new owner at a given price
-- therefore the new owner can agree or decline the offer
template TokenOffer
  with
    issuer: Party
    owner: Party
    description:  Text
    userAdmin: Party -- Party that makes sure that issuer and owner are verified and legitimate
    issued: Time
    lastPrice: Decimal
    currency: Text
    newOwner: Party
    price: Decimal
    royaltyRate: Decimal
  where
    signatory issuer, userAdmin, owner
    observer newOwner

    key (issuer, owner, description): (Party, Party, Text)
    maintainer key._2
    
    choice AcceptToken: (ContractId Token, ContractId Payable, Optional (ContractId Payable))
      observer newOwner
      controller newOwner
      do
        fromNewOwnerToOwner <- create Payable
          with
            from = newOwner
            to = owner
            amount = price
            currency
            reference = "Notional for '" <> description <>"'"

        condRoyaltyPayment <- if owner == issuer
          then return None
          else Some <$> create Payable
            with
              from = newOwner
              to = issuer
              amount = price * royaltyRate
              currency
              reference = "Royalty for '" <> description <>"'"

        newToken <- create Token
          with
            owner = newOwner
            lastPrice = price
            ..

        return (newToken, fromNewOwnerToOwner, condRoyaltyPayment)